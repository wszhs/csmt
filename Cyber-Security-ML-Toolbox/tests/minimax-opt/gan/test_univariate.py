import sys
ROOT_PATH='/Users/zhanghangsheng/Documents/my_code/Cyber-Security-ML-Toolbox'
sys.path.append(ROOT_PATH)

import torch
import torch.nn.parallel

import numpy as np
import torch.nn as nn
import matplotlib.pyplot as plt

from csmt.zoopt.vegans.GAN import VanillaGAN
from csmt.zoopt.vegans.utils import plot_losses

z_dim = 16
mu = 3.
sigma = 1.
X_train = np.random.normal(loc=mu, scale=sigma, size=5000).reshape(-1, 1)

def plot_generator_distribution(generator, n=10000):
    """ Try the generator on a noise mini-batch
    """
    z = torch.from_numpy(np.random.randn(n, z_dim).astype(np.float32))
    samples = generator(z).cpu().detach().numpy().flatten()
    plt.hist(samples, bins=100)
    plt.title('histogram of samples generated by generator');
    plt.show()

class Generator(nn.Module):
    def __init__(self):
        super(Generator, self).__init__()
        self.hidden_part = nn.Sequential(
            nn.Linear(z_dim, 32),
            nn.LeakyReLU(0.1),
        )
        self.output = nn.Linear(32, 1)

    def forward(self, x):
        x = self.hidden_part(x)
        x = self.output(x)
        return x

class Discriminator(nn.Module):
    def __init__(self):
        super(Discriminator, self).__init__()
        self.hidden_part = nn.Sequential(
            nn.Linear(1, 10),
            nn.LeakyReLU(0.1),
            nn.Linear(10, 1)
        )
        self.output = nn.Sigmoid()

    def forward(self, x):
        x = self.hidden_part(x)
        x = self.output(x)
        return x
    
discriminator = Discriminator()
generator = Generator()

plot_generator_distribution(generator)

gan = VanillaGAN(
    generator, discriminator, z_dim=z_dim, x_dim=1, fixed_noise_size=1024, 
    folder=None, device="cpu"
)

gan.summary()
gan.fit(X_train, print_every="2e", save_losses_every="0.1e", epochs=10, enable_tensorboard=False)

plot_generator_distribution(generator)

samples_l, losses = gan.get_training_results(by_epoch=False)
fig, axs = plot_losses(losses)
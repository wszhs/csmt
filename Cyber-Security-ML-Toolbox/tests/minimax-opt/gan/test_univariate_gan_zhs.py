
import sys
import argparse

ROOT_PATH='/Users/zhanghangsheng/Documents/my_code/Cyber-Security-ML-Toolbox'
sys.path.append(ROOT_PATH)
import numpy as np
import torch.nn as nn
import torch
from torch.utils.data import DataLoader,Dataset
from torch.autograd import Variable
import matplotlib.pyplot as plt

parser = argparse.ArgumentParser()
parser.add_argument("--n_epochs", type=int, default=100, help="number of epochs of training")
parser.add_argument("--batch_size", type=int, default=64, help="size of the batches")
parser.add_argument("--lr", type=float, default=0.0002, help="adam: learning rate")
parser.add_argument("--b1", type=float, default=0.5, help="adam: decay of first order momentum of gradient")
parser.add_argument("--b2", type=float, default=0.999, help="adam: decay of first order momentum of gradient")
parser.add_argument("--n_cpu", type=int, default=8, help="number of cpu threads to use during batch generation")
parser.add_argument("--latent_dim", type=int, default=100, help="dimensionality of the latent space")
parser.add_argument("--img_size", type=int, default=28, help="size of each image dimension")
parser.add_argument("--channels", type=int, default=1, help="number of image channels")
parser.add_argument("--sample_interval", type=int, default=400, help="interval betwen image samples")
opt = parser.parse_args()

z_dim = 16
mu = 3.
sigma = 1.
# Loss function
adversarial_loss = torch.nn.BCELoss()

def plot_generator_distribution(generator, n=10000):
    """ Try the generator on a noise mini-batch
    """
    z = torch.from_numpy(np.random.randn(n, z_dim).astype(np.float32))
    samples = generator(z).cpu().detach().numpy().flatten()
    plt.hist(samples, bins=100)
    plt.title('histogram of samples generated by generator');
    plt.show()

def plot_losses(losses, show=True, share=False):
    if share:
        fig, ax = plt.subplots(1, 1, figsize=(8, 8))
        for mode, loss_dict in losses.items():
            for loss_type, loss in loss_dict.items():
                ax.plot(loss, lw=2, label=mode+loss_type)
        ax.set_xlabel('Iterations')
        ax.legend()
    else:
        n = len(losses["Train"])
        nrows = int(np.sqrt(n))
        ncols = n // nrows
        fig, axs = plt.subplots(nrows=nrows, ncols=ncols, figsize=(12, 9))
        axs = np.ravel(axs)
        for mode, loss_dict in losses.items():
            for ax, (loss_type, loss) in zip(axs, loss_dict.items()):
                ax.plot(loss, lw=2, label=mode)
                ax.set_xlabel('Iterations')
                ax.set_title(loss_type)
                ax.set_facecolor("#ecffe7")
                ax.legend()
    fig.tight_layout()
    plt.show()

X_train = np.random.normal(loc=mu, scale=sigma, size=5000).reshape(-1, 1)

class Generator(nn.Module):
    def __init__(self):
        super(Generator, self).__init__()
        self.hidden_part = nn.Sequential(
            nn.Linear(z_dim, 32),
            nn.LeakyReLU(0.1),
        )
        self.output = nn.Linear(32, 1)

    def forward(self, x):
        x = self.hidden_part(x)
        x = self.output(x)
        return x

class Discriminator(nn.Module):
    def __init__(self):
        super(Discriminator, self).__init__()
        self.hidden_part = nn.Sequential(
            nn.Linear(1, 10),
            nn.LeakyReLU(0.1),
            nn.Linear(10, 1)
        )
        self.output = nn.Sigmoid()

    def forward(self, x):
        x = self.hidden_part(x)
        x = self.output(x)
        return x
    
discriminator = Discriminator()
generator = Generator()
plot_generator_distribution(generator)

# Optimizers
optimizer_G = torch.optim.Adam(generator.parameters(), lr=opt.lr, betas=(opt.b1, opt.b2))
optimizer_D = torch.optim.Adam(discriminator.parameters(), lr=opt.lr, betas=(opt.b1,opt.b2))

Tensor = torch.FloatTensor
# ----------
#  Training
# ----------

class DataSet(Dataset):
    def __init__(self, X, y=None):
        self.X = X
        self.y = y

    def __len__(self):
        return len(self.X)

    def __getitem__(self, index):
        if self.y is not None:
            return self.X[index], self.y[index]
        return self.X[index]

train_data = DataSet(X=X_train, y=None)
dataloader = DataLoader(train_data, batch_size=opt.batch_size)

logged_losses = {"Train": {}}
logged_losses["Train"]['Generator'] = []
logged_losses["Train"]['Discriminator'] = []

for epoch in range(opt.n_epochs):
    for i, (x) in enumerate(dataloader):
        # Adversarial ground truths
        valid =Tensor(x.size(0), 1).fill_(1.0)
        fake = Tensor(x.size(0), 1).fill_(0.0)
        # Configure input
        real_x = x.type(Tensor)
        optimizer_G.zero_grad()
        # Sample noise as generator input
        z = Tensor(np.random.normal(0, 1, (x.shape[0],z_dim)))
        # Generate a batch of images
        gen_x = generator(z)
        # Loss measures generator's ability to fool the discriminator
        g_loss = adversarial_loss(discriminator(gen_x), valid)
        g_loss.backward()
        optimizer_G.step()

        optimizer_D.zero_grad()
        # Measure discriminator's ability to classify real from generated samples
        real_loss = adversarial_loss(discriminator(real_x), valid)
        fake_loss = adversarial_loss(discriminator(gen_x.detach()), fake)
        d_loss = (real_loss + fake_loss) / 2

        d_loss.backward()
        optimizer_D.step()
        print(
            "[Epoch %d/%d] [Batch %d/%d] [D loss: %f] [G loss: %f]"
            % (epoch, opt.n_epochs, i, len(dataloader), d_loss.item(), g_loss.item())
        )
        logged_losses["Train"]['Generator'].append(g_loss.item())
        logged_losses["Train"]['Discriminator'].append(d_loss.item())

plot_losses(logged_losses)
plot_generator_distribution(generator)





